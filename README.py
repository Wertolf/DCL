
'''
--------------------------------
2019/08/02

CAUTION:
    possible logic trap: Label, getRect, LabelButton.cDict, LabelButton.get_rect
    inperfection: ThemedButton.onPress;

    caution for pygame:
    if rect is larger than surf,
    DISPLAY.blit(surf, rect) is by default setting the surf
    to the TOPLEFT corner of the given rect.

    resetFocus is essential after you click a button and have not moved out from it.

to-do list:
    interest mechanism;
    more help info;
    more attributes, combos to win and lose;

achievements:
    bug fixed: reload .Buttons in Game.__init__;
    bug fixed: no dieStory after win;

giving-up list:
    using OOP, instead dict, to store user and player data.
    change player.attrs to player.roles;

introduction:
我有一个梦想？
成为顶尖的程序员？成为优秀的游戏开发者？
也许有，也许没有。
可以有，可以没有。
但无论如何，我写了一款小游戏。
题材是别人的，所以也可以说是抄袭或者盗版，但技术是我自己的，所以它还算是我的作品，而且不负此名。
废话也不多说，上几张图，对比一下原作与此作。

可以看到，这确实是一款小游戏，在4399里面，大概也不算特别复杂的。这正是我选择它的原因。
写这款游戏，一部分是出于提升自己的python水平，一部分是觉得它有趣。正如我上面所说，我有这样的梦想。但我不喜欢这样的说法。
之所以这么讲，是因为梦想给人动力，同时也给人束缚，给人烦恼。
写一款游戏并不容易，梦想成真也不能只是随口说说。然而，有些梦想，也许注定不能实现，至少，要听天意。
归根结底，我是矛盾的。我想要继续，也想要放弃。

好了，关于游戏的基本设定，我不想在这里多说，你无论是玩原版，App Store上就有，还是玩我的版本，玩着玩着自然就知道了。
在这里，我想分享一下我遇到的困难。
不感兴趣的，直接跳过就好。

1.
首先，面向对象的困难。Mark Lutz说过，python并不强求你面向对象，你所有的面向对象的代码，都可以被替换掉。
然而，面向对象提供了很大的方便，它减少了代码重用，明晰了程序的逻辑，可以说，是一款可持续发展的程序的必备要素。

那么问题何在呢？
问题在于，该怎样安排面向对象的逻辑。
更根本的问题在于，作为一名开发者，定义什么类(class)，怎样的类，都由你自己决定。正是因此，路不止一条。
那么，哪条路才是最好的路呢？
我不知道。我甚至怀疑有这样的一条路存在。
不过，不同的路之间还是可以比较的。我也确信自己选择的这个方案一定不是最好的方案。

与原作相比，我的一个小创新大概可以算加了一个登陆界面。
说实话，这并不在我的最初计划之中。出于偶然，我看到嘉禾某节课的期末作业，要做一个GUI。然后我就想，要不我也整一个，于是就这么做了。

登陆GUI用的是python的标准库tkinter，之所以在这里提到它，是因为在开发的过程中，我越来越倾向于认为，tkinter与pygame是相似的。
可以说，pygame是一个更底层的tkinter。因此，我在定义类的时候，目前的最终方案，在很大程度上模仿了tkinter，比如Label, Button，实际上也就这两个。
值得说明的是，这种模仿是拙劣的。很多tkinter里的方法，我都不知道如何实现。
幸运的是，我发现要做一款小游戏，不需要实现那么全面的方法，只需要几个关键的就够了。

说到头来，问题在于，尽管OOP目前为止实现了这款游戏，但是，它的逻辑存在着未知的隐患。
这是最为根本，也最为致命的问题。它意味着，如果要走得更远，也许要推翻重来，我们得先往回走。
这是对信心的极大考验。

然而，在开发的最初就规划好完美的逻辑，似乎也不太现实，至少，我不得不承认，我一个人的力量是做不到的。
其实我是边写脚本，等到用到什么接口的时候，再回来把接口的内在逻辑写上。

总之，这是第一个问题。

2.
第二个问题，是响应用户事件的问题。这主要体现在按钮上。
一个按钮，鼠标从外面移到它上面，这一事件(event)，称为"进入"(Enter)；
反之，从它上面移到外面，这一事件，称为"离开"(Leave)。

在这部作品中，Enter和Leave都是通过颜色变化来体现的，这是一种简便易行，同时又醒目的做法，十分经济。

除此之外，鼠标左键单击按钮，这一事件，称为Button-1(tkinter)，MOUSEBUTTONUP(pygame)。

现在的问题是，我如何同时处理上面提到的这三个事件。要知道，玩家很可能先"进入"一个按钮，但是不点击它，而是直接"离开"。
我的解决方案是，用一个函数moveAndClick:
如果玩家没有进行任何"有效的点击"(没有在按钮上进行点击)，这个函数将不会退出，一直响应那些Enter和Leave事件；
一旦玩家进行了"有效的点击"，函数即刻退出，返回被点击的按钮。获得被点击的按钮后，用if分支处理不同情况。

目前为止，这良好地满足了这个小游戏的需要。
问题在于，只要玩家不进行"有效的点击"，函数将不会退出，它只能不断地响应Enter和Leave；
更重要地，这个函数接收一个列表作为参数，列表中包含了一个界面里所有的按钮，每一个按钮都是前面提到的Button类的实例(instance)。

如此一来，一旦我想新加一个功能，一个按钮，就必须再把它放到那个列表中。
如果你了解一些tkinter的机制，就会发现它的机制与我这里的机制完全不同。

对于一般的点击，tkinter会触发回调函数(call-back)。此外，作为一个窗口组件(widget)，它可以跟很多事件进行绑定，例如Enter和Leave，当然还有更多。

这种机制逻辑很清晰，在写脚本时，你可以把对一个按钮的所有设定(回调函数，各种事件绑定)都放在一起，以便日后查看与修改。
同时，你也不需要一个moveAndClick，来接受一个冗长的列表。

不过我认为，tkinter的这种回调函数机制，也有问题，主要体现在传入参数上面。一旦你想跨脚本编程，你就不得不传入非常多的参数。这里不作详细讨论。

3.
鉴于以上两点问题，我陷入了一个更为本质，更为绝望的怀疑之中：
我是否要继续用pygame作引擎？

这到底是我的问题，还是pygame，或者python的问题？

如果放弃python，重新学习另一种语言，那我将再一次耗费极大的精力。
目前我的想法是，也许可以尝试一下unity。但是，从头再来可没那么容易，我不打算在短期内进行它。

不过说句体外话，原作就是用unity写的，还是personal edition，我有一种预感，用unity写这么一款游戏，要比用pygame写容易得多。
原因在于，unity应该比较类似于tkinter，甚至比tkinter更为强大，底层的问题，别人都帮你解决好了，作为一个游戏开发者，你只需要构思游戏的内容。
诚然，游戏的内容才是游戏的灵魂。但是，引擎(engine)是游戏之所以可能的基础，少了一些底层的问题，也会少了一些开发的乐趣。不过，这完全取决于不同人的不同追求。

4.
上面说的都是技术问题。不过，一个游戏的产生，也不局限于技术，如上所述，还需要灵魂。

可以看到，我没有原作的那些插图，这部作品由文字、颜色、图形和声音构成。
虽然我也没觉得原作的那些插图有多好，不过，我倒是很好奇一部作品，配上精良的插图，会是什么样子。
不过，这不是我力所能及的范围，我需要一个插图师，如果有的话。

另外，目前的音效以及BGM，都是在网上找的。
因此，除了一个插图师，我还需要一个作曲家。说实话，我自己倒是对这个领域比较感兴趣，只是全无涉猎罢了。

当然，还需要一些脑洞大开的设计者们。实际上，这部作品之所以诞生，部分原因即是，在3月，还是4月，的某个晚上，我的舍友说，写个抽卡人生吧，你用python写，我用c写，怎么样？
结果，他用一个晚上就完成了一个命令行(command-line)版的抽卡人生，而我，则用了5个月的时间，断断续续地，完成了下面将要分享的它。

=====
好了，差不多就说到这里吧。有任何问题、想法，意见或建议，乃至于合作意向的，直接找我就好。
如果这篇文章竟能走出我的朋友圈的话，那么可以通过邮箱联系我1105269535@qq.com，或者直接在公众号里留言。

最后，就是这部作品了。
之所以用百度云，只是觉得它蛮高端的，不过，如果你没开会员的话，可能需要下个一段时间。
另外，如果你的电脑里有360，它会毫不留情地把它认定为木马。一般情况下，它是值得信任的，但我也不排除有不法分子从中作梗。
话说回来，如果有不法分子能看上我的作品，那我也是够荣幸了。

此外，目前，这部作品只支持windows，只在win10上运行过，win7还不知道。
如果有想将其拓展到mac平台上的，或是其他平台(说实话，如果要到其他平台，比如iOS或者Andriod，可能要重写一遍，所以并不现实)，也可以联系我。
其实没什么难的，无非是我把源码发给你，然后你用mac版的pyinstaller封装一下的问题。

Hopefully, you can enjoy yourselves.
'''
